@startuml 認証認可シーケンス図

title 認証認可システム - シーケンス図

actor User as U
participant "Frontend\n(Next.js)" as F
participant "Backend\n(NestJS)" as B
participant "AuthService" as AS
participant "UserService" as US
participant "JwtService" as JS
participant "ConfigService" as CS
participant "Environment\n(.env)" as ENV
participant "Database\n(PostgreSQL)" as DB

== ユーザー登録フロー ==

U -> F: 新規登録フォーム入力
note right: email, password, name
F -> B: POST /graphql\nregister mutation
B -> AS: register(registerInput)
AS -> US: findByEmail(email)
US -> DB: SELECT * FROM users WHERE email = ?
DB --> US: ユーザー情報 or null
US --> AS: existingUser or null

alt ユーザーが既に存在する場合
    AS --> B: throw UnauthorizedException\n"User already exists"
    B --> F: GraphQL Error
    F --> U: "既に登録済みです"
else ユーザーが存在しない場合
    AS -> AS: bcrypt.hash(password, 10)
    AS -> US: create({email, password, name})
    US -> DB: INSERT INTO users\n(email, password, name, ...)
    DB --> US: 新規ユーザー情報
    US --> AS: user
    AS -> JS: sign({sub: userId, email})
    note right: JWT_SECRETが必要
    JS -> CS: get('JWT_SECRET')
    CS -> ENV: 環境変数読み込み
    ENV --> CS: JWT_SECRET値
    CS --> JS: JWT_SECRET
    JS -> JS: jwt.sign(payload, JWT_SECRET, {expiresIn: '7d'})
    JS --> AS: JWT token
    AS --> B: {user, token}
    B --> F: AuthResponse
    F -> F: Cookie.set('token', token)
    F -> F: Cookie.set('user', JSON.stringify(user))
    F -> F: client.clearStore()
    F -> F: router.push('/dashboard')
    F --> U: ダッシュボードへリダイレクト
end

== ログインフロー ==

U -> F: ログインフォーム入力
note right: email, password
F -> B: POST /graphql\nlogin mutation
B -> AS: login(loginInput)
AS -> US: findByEmail(email)
US -> DB: SELECT * FROM users WHERE email = ?
DB --> US: ユーザー情報 or null
US --> AS: user or null

alt ユーザーが存在しない場合
    AS --> B: throw UnauthorizedException\n"Invalid credentials"
    B --> F: GraphQL Error
    F --> U: "認証に失敗しました"
else ユーザーが存在する場合
    AS -> AS: bcrypt.compare(password, user.password)
    alt パスワードが一致しない場合
        AS --> B: throw UnauthorizedException\n"Invalid credentials"
        B --> F: GraphQL Error
        F --> U: "認証に失敗しました"
    else パスワードが一致する場合
        AS -> US: updateLastLogin(userId)
        US -> DB: UPDATE users SET lastLoginAt = NOW()\nWHERE id = ?
        DB --> US: 更新完了
        US --> AS: 完了
        AS -> JS: sign({sub: userId, email})
        note right: JWT_SECRETが必要
        JS -> CS: get('JWT_SECRET')
        CS -> ENV: 環境変数読み込み
        ENV --> CS: JWT_SECRET値
        CS --> JS: JWT_SECRET
        JS -> JS: jwt.sign(payload, JWT_SECRET, {expiresIn: '7d'})
        JS --> AS: JWT token
        AS --> B: {user, token}
        B --> F: AuthResponse
        F -> F: Cookie.set('token', token)
        F -> F: Cookie.set('user', JSON.stringify(user))
        F -> F: client.clearStore()
        F -> F: router.push('/dashboard')
        F --> U: ダッシュボードへリダイレクト
    end
end

== 認証が必要なAPIアクセス ==

U -> F: 認証が必要なページアクセス
F -> B: POST /graphql\n認証が必要なQuery/Mutation
note right: Cookieから取得したJWT tokenを\nAuthorizationヘッダーに設定

B -> B: GqlAuthGuard実行
B -> B: JwtStrategy.validate()
B -> JS: verify(token, JWT_SECRET)
note right: JWT_SECRETが必要
JS -> CS: get('JWT_SECRET')
CS -> ENV: 環境変数読み込み
ENV --> CS: JWT_SECRET値
CS --> JS: JWT_SECRET
JS -> JS: jwt.verify(token, JWT_SECRET)

alt JWT tokenが無効な場合
    JS --> B: throw UnauthorizedException
    B --> F: 401 Unauthorized
    F -> F: router.push('/login')
    F --> U: ログインページへリダイレクト
else JWT tokenが有効な場合
    JS --> B: {sub: userId, email}
    B -> US: findById(userId)
    US -> DB: SELECT * FROM users WHERE id = ?
    DB --> US: ユーザー情報
    US --> B: user
    B -> B: context.req.user = user
    B -> B: リゾルバー実行
    B --> F: データレスポンス
    F --> U: データ表示
end

== ログアウトフロー ==

U -> F: ログアウト操作
F -> F: Cookie.remove('token')
F -> F: Cookie.remove('user')
F -> F: client.clearStore()
F -> F: router.push('/login')
F --> U: ログインページへリダイレクト

== アプリケーション初期化時 ==

B -> CS: NestJSアプリケーション起動
CS -> ENV: JWT_SECRET環境変数読み込み
ENV --> CS: JWT_SECRET値
CS -> JS: JwtModule.register({\n  secret: JWT_SECRET,\n  signOptions: { expiresIn: '7d' }\n})
JS --> CS: JwtService初期化完了
CS --> B: 認証モジュール初期化完了

== JWT_SECRET管理フロー ==

note over ENV, CS
**JWT_SECRET環境変数の流れ**
1. .envファイルに保存
   JWT_SECRET=<秘密鍵>

2. ConfigServiceが読み込み
   - アプリケーション起動時に一度だけ読み込み
   - メモリ内にキャッシュ

3. JwtServiceで使用
   - トークン署名時: jwt.sign(payload, JWT_SECRET)
   - トークン検証時: jwt.verify(token, JWT_SECRET)

**セキュリティ考慮事項**
- JWT_SECRETは外部に漏れてはいけない
- 本番環境では強力な秘密鍵を使用
- 定期的な秘密鍵ローテーション推奨
end note

== セキュリティ仕様 ==

note over B, DB
**JWT設定**
- アルゴリズム: HS256
- シークレット: GUID形式の秘密鍵
- 有効期限: 7日間（Cookie設定）
- 署名・検証にJWT_SECRETを使用

**パスワード暗号化**
- アルゴリズム: bcrypt
- ソルトラウンド: 10

**Cookie設定**
- HttpOnly: false (フロントエンドからアクセス必要)
- Secure: 本番環境のみ true
- SameSite: strict
- 有効期限: 7日間

**環境変数管理**
- JWT_SECRET: .envファイルで管理
- ConfigServiceを通じてアクセス
- アプリケーション起動時に読み込み
end note

@enduml