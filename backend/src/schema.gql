# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AIAnalysisMetadata {
  """Analysis timestamp"""
  analysisTimestamp: String!

  """Confidence scores as JSON string"""
  confidenceScores: String!

  """AI model used for analysis"""
  modelUsed: String!
}

enum AnalysisStatus {
  COMPLETED
  FAILED
  PENDING
  PROCESSING
}

type AnswerQualityScores {
  """Technical accuracy score (0-100)"""
  accuracy: Float!

  """Communication clarity score (0-100)"""
  clarity: Float!

  """Answer detail level score (0-100)"""
  detail: Float!

  """Answer structure score (0-100)"""
  structure: Float!
}

enum AnswerStatus {
  COMPLETED
  FAILED
  IN_PROGRESS
}

type AudioTranscriptionSubscriptionResponse {
  questionId: String!
  sessionId: String!
  timestamp: String!
  transcription: String!
  userId: String!
}

type AuthResponse {
  token: String!
  user: User!
}

input CompleteAnswerInput {
  """Question ID"""
  questionId: String!

  """Session ID"""
  sessionId: String!
}

type CompleteAnswerResponse {
  isInterviewComplete: Boolean!
  message: String!
  nextQuestion: InterviewQuestionResponse
  progress: InterviewProgress!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EvaluationReportResponse {
  """AI analysis metadata"""
  aiAnalysisMetadata: AIAnalysisMetadata!

  """Answer quality evaluation"""
  answerQualityScores: AnswerQualityScores!

  """Areas for improvement"""
  areasForImprovement: [String!]!

  """Report creation timestamp"""
  createdAt: String!

  """Detailed feedback text"""
  detailedFeedback: String!

  """Experience and achievements evaluation"""
  experienceEvaluation: ExperienceEvaluation!

  """Report ID"""
  id: ID!

  """Overall evaluation score (0-100)"""
  overallScore: Float!

  """Recommendation grade (A-E)"""
  recommendationGrade: String!

  """Recommended positions"""
  recommendedPositions: [String!]!

  """Session ID"""
  sessionId: ID!

  """Soft skills evaluation"""
  softSkillsScores: SoftSkillsScores!

  """Top strengths identified"""
  strengths: [String!]!

  """Technical skills evaluation"""
  technicalScores: TechnicalScores!
}

type ExperienceEvaluation {
  """Achievements score (0-100)"""
  achievements: Float!

  """Project scale experience score (0-100)"""
  projectScale: Float!

  """Experience relevance score (0-100)"""
  relevance: Float!

  """Role responsibility score (0-100)"""
  responsibility: Float!
}

input GenerateEvaluationReportInput {
  """Session ID for which to generate the evaluation report"""
  sessionId: ID!
}

input GeneratePdfReportInput {
  """Report ID for which to generate PDF"""
  reportId: ID!
}

type InterviewAnswer {
  answer_data: String!
  answer_status: AnswerStatus!
  completed_at: DateTime
  created_at: DateTime!
  id: ID!
  question_id: String!
  started_at: DateTime!
  updated_at: DateTime!
}

type InterviewProgress {
  completed: Int!
  remaining: Int!
  total: Int!
}

type InterviewQuestion {
  answer: InterviewAnswer
  created_at: DateTime!
  id: ID!
  question_data: String!
  question_order: Float!
  question_type: QuestionType!
  sessionId: String!
}

type InterviewQuestionResponse {
  createdAt: DateTime!
  id: ID!
  metadata: JSON
  orderNumber: Int!
  question: String!
  sessionId: ID!
  updatedAt: DateTime!
}

type InterviewSession {
  completedAt: DateTime
  createdAt: DateTime!
  id: ID!
  questions: [InterviewQuestion!]!
  sessionStatus: SessionStatus!
  skillSheet: SkillSheet!
  skillSheetId: String!
  startedAt: DateTime
  updatedAt: DateTime!
  userId: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  completeAnswer(input: CompleteAnswerInput!): CompleteAnswerResponse!
  generateEvaluationReport(input: GenerateEvaluationReportInput!): EvaluationReportResponse!
  generatePdfReport(input: GeneratePdfReportInput!): PdfReportResponse!
  login(input: LoginInput!): AuthResponse!
  register(input: RegisterInput!): AuthResponse!
  startInterview(input: StartInterviewInput!): StartInterviewResponse!
}

type PdfReportResponse {
  """Suggested filename for the PDF"""
  filename: String!

  """HTML content for PDF generation"""
  htmlContent: String!

  """Report ID"""
  reportId: String!

  """PDF title"""
  title: String!
}

type Query {
  getEvaluationReport(reportId: String!): EvaluationReportResponse!
  getLatestSession: InterviewSession
  getMySkillSheets: [SkillSheet!]!
  getReportsBySession(sessionId: String!): [EvaluationReportResponse!]!
  getSkillSheet(id: String!): SkillSheet
  interviewSession(sessionId: String!): InterviewSession!
  me: User!
  user(id: String!): User
}

enum QuestionType {
  MOTIVATION
  REVERSE
  SELF_INTRODUCTION
  TECHNICAL
}

input RegisterInput {
  email: String!
  name: String
  password: String!
}

enum SessionStatus {
  CANCELLED
  COMPLETED
  IN_PROGRESS
  PENDING
}

type SkillSheet {
  analysisStatus: AnalysisStatus!
  createdAt: DateTime!
  fileName: String!
  filePath: String!
  id: ID!
  skillData: String!
  updatedAt: DateTime!
  userId: String!
}

type SoftSkillsScores {
  """Communication skills score (0-100)"""
  communication: Float!

  """Leadership skills score (0-100)"""
  leadership: Float!

  """Learning ability score (0-100)"""
  learning: Float!

  """Problem solving skills score (0-100)"""
  problemSolving: Float!

  """Teamwork skills score (0-100)"""
  teamwork: Float!
}

input StartInterviewInput {
  sessionId: ID!
}

type StartInterviewResponse {
  allQuestions: [InterviewQuestionResponse!]!
  currentQuestion: InterviewQuestionResponse!
  sessionId: ID!
  startedAt: DateTime!
  status: String!
}

type Subscription {
  """リアルタイム音声転写結果を受信する"""
  audioTranscription(sessionId: String!): AudioTranscriptionSubscriptionResponse!
}

type TechnicalScores {
  """Architecture design score (0-100)"""
  architecture: Float!

  """Backend technology score (0-100)"""
  backend: Float!

  """Database technology score (0-100)"""
  database: Float!

  """Frontend technology score (0-100)"""
  frontend: Float!

  """Infrastructure score (0-100)"""
  infrastructure: Float!
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  isActive: Boolean!
  lastLoginAt: DateTime
  name: String
  role: String!
  updatedAt: DateTime!
}